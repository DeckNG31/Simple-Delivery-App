/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.pedido;

import controllers.ClienteController;
import controllers.PedidoController;
import helpers.HelpersVista;
import isi.deso.tp.Pedido;
import isi.deso.tp.usuarios.Cliente;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import view.ItemMenu.ListaItemMenuVista;

/**
 *
 * @author mariano
 */
public class CrearPedidoVista extends javax.swing.JFrame {

    /**
     * Creates new form CrearPedidoVista
     */
    private final PedidoController pedidoDao;
    private DefaultTableModel modeloTablaItemMenu;

    public CrearPedidoVista() {
        initComponents();

        pedidoDao = PedidoController.getInstance();

        buttonGroup1.add(rbEfectivo);
        buttonGroup1.add(rbTransferencia);
        buttonGroup1.add(rbMercadoPago);

        //setea la precio total a 0
        labelTotal.setText("0");

        //cargar clientes
        cargarClientes();

        //inicializar tabla item menu
        modeloTablaItemMenu = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Evita que todas las celdas sean editables
            }
        };

        String titulos[] = {"ID", "Nombre", "Precio", "Cantidad"};
        modeloTablaItemMenu.setColumnIdentifiers(titulos);

        tablaItemsAgregados.setModel(modeloTablaItemMenu);
    }

    public void addRowItemMenu(Object[] row) {
        //sumar total
        double precio = Double.parseDouble(row[2].toString());
        int cantidad = Integer.parseInt(row[3].toString());
        

        //verificar si ya existe en la lista
        DefaultTableModel model = (DefaultTableModel) tablaItemsAgregados.getModel();
        String nuevoId = row[0].toString(); 
        boolean existe = false;
        int i;
        for (i = 0; i < model.getRowCount(); i++) {
            String idExistente = model.getValueAt(i, 0).toString(); 
            if (idExistente.equals(nuevoId)) {
              existe = true;  
              
                break;
            }
        }
        if (!existe) {
            model.addRow(row);
        } else {
           Integer cantActual = Integer.parseInt(model.getValueAt(i,3).toString()) ;
           Integer cantNueva = cantActual + cantidad;
           model.setValueAt(cantNueva, i, 3);
        }

        
        sumarTotal(precio, cantidad);
    }

    private void sumarTotal(Double precio, Integer cantidad) {
        Double totalActual = Double.parseDouble(labelTotal.getText());
        Double nuevoTotal = totalActual + precio * cantidad;
        labelTotal.setText(nuevoTotal.toString());
    }

    private void restarTotal(Double precio, Integer cantidad) {
        Double totalActual = Double.parseDouble(labelTotal.getText());
        Double nuevoTotal = totalActual - precio * cantidad;
        labelTotal.setText(nuevoTotal.toString());
    }

    public void cargarClientes() {
        DefaultTableModel Modelotabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Evita que todas las celdas sean editables
            }
        };

        String titulos[] = {"ID", "Nombre"};
        Modelotabla.setColumnIdentifiers(titulos);

        // Llenar la tabla con los datos de los vendedores
        ClienteController.getInstance().listarClientes().forEach(c -> {
            Modelotabla.addRow(new Object[]{c.getId(), c.getNombre()});
        });

        // Establecer el modelo en la tabla
        tablaClientes.setModel(Modelotabla);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(Modelotabla);
        tablaClientes.setRowSorter(sorter);
        
    tablaClientes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btnAgregarItem = new javax.swing.JButton();
        fieldCuit = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        fieldAlias = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaItemsAgregados = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        fieldCbu = new javax.swing.JTextField();
        rbEfectivo = new javax.swing.JRadioButton();
        fecha = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rbMercadoPago = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        rbTransferencia = new javax.swing.JRadioButton();
        labelTotal = new javax.swing.JLabel();
        labelCliente = new javax.swing.JLabel();
        Guardar = new javax.swing.JButton();
        eliminarItemMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAgregarItem.setText("Agregar ItemMenu");
        btnAgregarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarItemActionPerformed(evt);
            }
        });

        fieldCuit.setEnabled(false);
        fieldCuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldCuitActionPerformed(evt);
            }
        });

        jLabel7.setText("Items agregados");

        jLabel2.setText("CUIT");

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        fieldAlias.setEnabled(false);

        jLabel9.setText("Total: ");

        jLabel3.setText("ALIAS");

        tablaItemsAgregados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaItemsAgregados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaItemsAgregadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaItemsAgregados);

        jLabel4.setText("CBU");

        fieldCbu.setEnabled(false);

        rbEfectivo.setText("Efectivo");
        rbEfectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEfectivoActionPerformed(evt);
            }
        });

        fecha.setText("Fecha: {dayname} {day} de {month} de {year}");

        jLabel6.setText("Cliente seleccionado: ");

        jLabel8.setText("Seleccione un cliente");

        rbMercadoPago.setText("Mercado Pago");
        rbMercadoPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMercadoPagoActionPerformed(evt);
            }
        });

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaClientes);

        rbTransferencia.setText("Transferencia");
        rbTransferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTransferenciaActionPerformed(evt);
            }
        });

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        eliminarItemMenu.setText("Eliminar");
        eliminarItemMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarItemMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(fecha)
                        .addGap(75, 75, 75)
                        .addComponent(labelFecha))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(rbTransferencia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rbMercadoPago)
                                .addGap(74, 74, 74)
                                .addComponent(rbEfectivo))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eliminarItemMenu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAgregarItem))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(297, 297, 297))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnCancelar)
                                        .addGap(143, 143, 143)
                                        .addComponent(Guardar)
                                        .addGap(82, 82, 82))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel4)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(fieldCbu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                                .addComponent(fieldCuit, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(fieldAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(labelCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jLabel8)))))))
                .addGap(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(labelCliente))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(btnAgregarItem)
                    .addComponent(labelTotal)
                    .addComponent(eliminarItemMenu))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbTransferencia)
                    .addComponent(rbMercadoPago)
                    .addComponent(rbEfectivo))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldCuit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldCbu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(Guardar))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClientesMouseClicked
        // TODO add your handling code here:
         int row = tablaClientes.rowAtPoint(evt.getPoint());
        if (row >= 0) {
            // Obtener los datos de la fila clicada
            String id = (String) tablaClientes.getValueAt(row, 0).toString();
            String nombre = (String) tablaClientes.getValueAt(row, 1).toString();

            labelCliente.setText(id + ", " + nombre);
        }
    }//GEN-LAST:event_tablaClientesMouseClicked

    private void rbEfectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEfectivoActionPerformed
        // TODO add your handling code here:
        fieldAlias.setEnabled(false);
        fieldCbu.setEnabled(false);
        fieldCuit.setEnabled(false);
        fieldAlias.setText("");
        fieldCbu.setText("");
        fieldCuit.setText("");
    }//GEN-LAST:event_rbEfectivoActionPerformed

    private void tablaItemsAgregadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaItemsAgregadosMouseClicked
        int row = tablaItemsAgregados.rowAtPoint(evt.getPoint());
        if (row >= 0) {
            // Obtener los datos de la fila clicada
            String id = (String) tablaItemsAgregados.getValueAt(row, 0).toString();
            String nombre = (String) tablaItemsAgregados.getValueAt(row, 1).toString();

            // fieldCliente.setText(id + ", " + nombre);
        }
    }//GEN-LAST:event_tablaItemsAgregadosMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void fieldCuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldCuitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldCuitActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed

        // Validamos que los campos no estén vacíos y que se haya seleccionado un método de pago
        if (!fieldAlias.getText().equals("")
                && !fieldCbu.getText().equals("")
                && !fieldCuit.getText().equals("")
                && (rbEfectivo.isSelected() || rbMercadoPago.isSelected() || rbTransferencia.isSelected())) {

            // Obtenemos los valores de los campos
            String alias = fieldAlias.getText();
            String cbu = fieldCbu.getText();
            String cuit = fieldCuit.getText();
            String metodoPago = obtenerMetodoPagoSeleccionado();
            //double total = calcularTotal();  // Suponiendo que tienes una función que calcula el total
            //String fecha = obtenerFechaActual();  // Puedes usar una fecha actual o de selección
            int clienteId = obtenerClienteSeleccionado(); // Asumiendo que tienes alguna forma de seleccionar un cliente

            // pc.crearPedido(Double.NaN, LocalDate.EPOCH, WIDTH, metodoPagoStr);
            // Crear el pedido
            // Pedido pedido = new Pedido(fecha, total, metodoPago, cuit, alias, cbu, clienteId);
            // Pedido pedido = new Pedido(total,fecha,clienteId,metodoPago);
            // Guardar el pedido en la base de datos
            // cc.crearPedido(pedido);
            // Guardamos los detalles del pedido (items seleccionados)
            //guardarDetallePedido(pedido.getId());
            // Limpiar los campos
            fieldAlias.setText("");
            fieldCbu.setText("");
            fieldCuit.setText("");

            // Cambiar de vista (volvemos a la lista de pedidos)
            HelpersVista.cambiarVentana(this, ListarPedidoVista.class);

        } else {
            // Mostrar un mensaje de error si los campos no están completos
            HelpersVista.mostrarMensaje("Complete todos los campos y seleccione un método de pago", "Error", "Alerta");
        }
    }
// Función para obtener el método de pago seleccionado

    private String obtenerMetodoPagoSeleccionado() {
        if (rbEfectivo.isSelected()) {
            return "Efectivo";
        } else if (rbMercadoPago.isSelected()) {
            return "Mercado Pago";
        } else if (rbTransferencia.isSelected()) {
            return "Transferencia";
        }
        return "";
    }

// Función para obtener el ID del cliente seleccionado (suponiendo que tienes una tabla de clientes)
    private int obtenerClienteSeleccionado() {
        int selectedRow = tablaClientes.getSelectedRow();
        if (selectedRow != -1) {
            return Integer.parseInt(tablaClientes.getValueAt(selectedRow, 0).toString()); // ID del cliente en la columna 0
        }
        return -1; // Si no hay cliente seleccionado
    }

// Función para guardar los detalles del pedido
    private void guardarDetallePedido(int pedidoId) {
        for (int i = 0; i < tablaItemsAgregados.getRowCount(); i++) {
            int itemMenuId = Integer.parseInt(tablaItemsAgregados.getValueAt(i, 0).toString()); // ID del item en la columna 0
            int cantidad = Integer.parseInt(tablaItemsAgregados.getValueAt(i, 1).toString()); // Cantidad en la columna 1

            //PedidoDetalle detalle = new PedidoDetalle(itemMenuId, pedidoId, cantidad);
            //cc.crearDetallePedido(detalle); // Asumiendo que tienes un método para guardar los detalles
        }


    }//GEN-LAST:event_GuardarActionPerformed

    private void btnAgregarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarItemActionPerformed
        // TODO add your handling code here:
        HelpersVista.abrirVentana(CargarItemMenuVista.class, this);

    }//GEN-LAST:event_btnAgregarItemActionPerformed

    private void rbTransferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTransferenciaActionPerformed
        // TODO add your handling code here:
        fieldCuit.setEnabled(true);
        fieldCbu.setEnabled(true);
        fieldAlias.setEnabled(false);
        fieldAlias.setText("");
    }//GEN-LAST:event_rbTransferenciaActionPerformed

    private void rbMercadoPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMercadoPagoActionPerformed
        // TODO add your handling code here:
        fieldAlias.setEnabled(true);
        fieldCbu.setEnabled(false);
        fieldCuit.setEnabled(false);
        fieldCbu.setText("");
        fieldCuit.setText("");
    }//GEN-LAST:event_rbMercadoPagoActionPerformed

    private void eliminarItemMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarItemMenuActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) tablaItemsAgregados.getModel();
        if (tablaItemsAgregados.getSelectedRows().length < 1) {
            HelpersVista.mostrarMensaje("Selecciona una o mas items !", "Error", "Alerta");
        } else {
            for (int i = tablaItemsAgregados.getSelectedRowCount() - 1; i >= 0; i--) {
                try {
                    // Obtener el índice de la fila seleccionada
                    int rowIndex = tablaItemsAgregados.getSelectedRows()[i];

                    //restar total
                    double precio = Double.parseDouble(model.getValueAt(rowIndex, 2).toString());
                    int cantidad = Integer.parseInt(model.getValueAt(rowIndex, 3).toString());

                    restarTotal(precio, cantidad);

                    // Eliminar la fila de la tabla
                    model.removeRow(rowIndex);

                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }

        }


    }//GEN-LAST:event_eliminarItemMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearPedidoVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearPedidoVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearPedidoVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearPedidoVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrearPedidoVista().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Guardar;
    private javax.swing.JButton btnAgregarItem;
    private javax.swing.JButton btnCancelar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton eliminarItemMenu;
    private javax.swing.JLabel fecha;
    private javax.swing.JTextField fieldAlias;
    private javax.swing.JTextField fieldCbu;
    private javax.swing.JTextField fieldCuit;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelCliente;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JRadioButton rbEfectivo;
    private javax.swing.JRadioButton rbMercadoPago;
    private javax.swing.JRadioButton rbTransferencia;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTable tablaItemsAgregados;
    // End of variables declaration//GEN-END:variables
}
